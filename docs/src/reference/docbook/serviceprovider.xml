<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="serviceprovider" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Service Provider 'Connect' Framework</title>
	<para>
		The <code>spring-social-core</code> module includes a <emphasis>Service Provider 'Connect' Framework</emphasis> for managing connections to Software-as-a-Service (SaaS) providers such as Facebook and Twitter.
		This framework allows your application to establish connections between local user accounts and accounts those users have with external service providers.  
		Once a connection is established, it can be be used to obtain a strongly-typed Java binding to the ServiceProvider's API, giving your application the ability to invoke the API on behalf of a user.
	</para>
	<para>
		To illustrate, consider Facebook as an example ServiceProvider.
		Suppose your application, AcmeApp, allows users to share content with their Facebook friends.
		To support this, a connection needs to be established between a user's AcmeApp account and her Facebook account.
		Once established, a FacebookApi instance can be obtained and used to post content to the user's wall.
		Spring Social's 'Connect' framework provides a clean API for managing service provider connections such as this.
	</para>
	<section id="service-providers-base-api">
		<title>Core API</title>
		<para>
			The <interfacename>ServiceProviderConnection&lt;S&gt;</interfacename> interface models a connection to an external service provider such as Facebook:
			<programlisting language="java"><![CDATA[
public interface ServiceProviderConnection<S> {
    
    ServiceProviderConnectionKey getKey();
    
    String getDisplayName();

    String getProfileUrl();

    String getImageUrl();

    void sync();

    boolean test();

    boolean hasExpired();

    void refresh();

    ServiceProviderUserProfile fetchUserProfile();

    void updateStatus(String message);

    S getServiceApi();

    ServiceProviderConnectionData createData();

}]]>
			</programlisting>
		</para>
		<para>
			Each ServiceProviderConnection is uniquely identified by a composite key consisting of a providerId (e.g. 'facebook') and connected providerUserId (e.g. '1255689239', for Keith Donald's Facebook ID).
			This key tells you what provider user the connection is connected to.
		</para>
		<para>
			A connection has a number of meta-properties that can be used to render it on a screen, including a displayName, profileUrl, and imageUrl.
			As an example, the following HTML template snippet could be used to generate a link to the connected user's profile on the provider's site:
			<programlisting language="xml"><![CDATA[
<img src="${connection.imageUrl}" /> <a href="${connection.profileUrl}">${connection.displayName}</a>Ã¥]]>			
			</programlisting>
			The value of these properties may depend on the state of the provider user's profile.
			In this case, sync() can be used to synchronize these values if the user's profile is updated.
		</para>
		<para>
			A connection can be tested to determine if its authorization credentials are valid.
			If invalid, the connection may have expired or been revoked by the provider.
			If the connection has expired, a connection may be refreshed to renew its authorization credentials.
		</para>
		<para>
			A connection provides several operations that allow the client application to invoke the ServiceProvider's API in a uniform way.
			This includes the ability to fetch a model of the user's profile and update the user's status in the provider's system.
		</para>
		<para>
			A connection's parameterized type &lt;S&gt; represents the Java binding to the ServiceProvider's native API.
			An instance of this API binding can be obtained by calling <code>getServiceApi()</code>.
			As an example, a Facebook connection instance would be parameterized as ServiceProviderConnection&lt;FacebookApi&gt;.
			<code>getServiceApi()</code> would return a FacebookApi instance that provides a Java binding to Facebook's graph API for a specific Facebook user.
		</para>
		<para>
			Finally, the internal state of a connection can be captured for transfer between layers of your application by calling <code>createData()</code>.
			This could be used to persist the connection in a database, or serialize it over the network.
		</para>
		<para>
			To put this model into action, suppose we have a reference to a ServiceProviderConnection&lt;TwitterApi&gt; instance.
			Suppose the connected user is the Twitter user with screen name 'kdonald'.
			<orderedlist>
				<listitem><para>ServiceProviderConnection#getKey() would return ('twitter', '14718006') where '14718006' is @kdonald's Twitter-assigned user id that never changes.</para></listitem>
				<listitem><para>ServiceProviderConnection#getDisplayName() would return '@kdonald'.</para></listitem>
				<listitem><para>ServiceProviderConnection#getProfileUrl() would return 'http://twitter.com/kdonald'.</para></listitem>
				<listitem><para>ServiceProviderConnection#getImageUrl() would return 'http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg'.</para></listitem>
				<listitem><para>ServiceProviderConnection#sync() would synchronize the state of the connection with @kdonald's profile.</para></listitem>				
				<listitem>
					<para>
						ServiceProviderConnection#test() would return true indicating the authorization credentials associated with the Twitter connection are valid.
						This assumes Twitter has not revoked the AcmeApp client application, and @kdonald has not reset his authorization credentials (Twitter connections do not expire).
					</para>
				</listitem>
				<listitem><para>ServiceProviderConnection#hasExpired() would return false.</para></listitem>
				<listitem><para>ServiceProviderConnection#refresh() would not do anything since connections to Twitter do not expire.</para></listitem>
				<listitem><para>ServiceProviderConnection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a ServiceProviderUser model.</para></listitem>
				<listitem><para>ServiceProviderConnection#updateStatus(String) would post a status update to @kdonald's timeline.</para></listitem>
				<listitem><para>ServiceProviderConnection#getServiceApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>
				<listitem><para>ServiceProviderConnection#createData() would return a ServiceProviderConnectionData that could be serialized and used to restore the connection at a later time.</para></listitem>
			</orderedlist>
		</para>
	</section>
	<section id="service-providers-establishing-connections">
		<title>Establishing Connections</title>
		<para>
			So far we have discussed how existing connections are modeled, but we have not yet discussed how new connections are established.
			The manner in which connections between local users and provider users are established varies based on the authorization protocol used by the ServiceProvider.
			Some service providers use OAuth, others use Basic Auth, others may use something else.
			Spring Social currently provides native support for OAuth-based service providers, including support for OAuth 1 and OAuth 2.
			This covers the leading social networks, such as Facebook and Twitter, all of which use OAuth to secure their APIs.
			Support for other authorization protocols can be added by extending the framework.
		</para>
		<para>
			Each authorization protocol is treated as an implementation detail where protocol-specifics are kept out of the core ServiceProviderConnection API.
			A ServiceProviderConnectionFactory abstraction encapsulates the construction of connections that use a specific authorization protocol.
			In the following sections, we will discuss the major ServiceProviderConnectionFactory classes provided by the framework.
			Each section will also describe the protocol-specific flow required to establish a new connection.
		</para>
		<section id="service-providers-oauth2">
			<title>OAuth2 Service Providers</title>
			<para>
				OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Foursquare, Gowalla, and 37signals.
				In Spring Social, a OAuth2ServiceProviderConnectionFactory is used to establish connections with a OAuth2-based service provider:
				<programlisting language="java"><![CDATA[
public class OAuth2ServiceProviderConnectionFactory<S> extends ServiceProviderConnectionFactory<S> {

    public OAuth2Operations getOAuthOperations();

    public ServiceProviderConnection<S> createConnection(AccessGrant accessGrant);

}]]>
				</programlisting>
			</para>
			<para>
				<methodname>getOAuthOperations()</methodname> returns an API to use to conduct the authorization flow, or "OAuth Dance", with a service provider.
				The result of this flow is an <classname>AccessGrant</classname> that can be used to establish a connection with a local user account by calling <methodname>createConnection</methodname>.
				The OAuth2Operations interface is shown below:
			</para>
			<programlisting language="java"><![CDATA[
public interface OAuth2Operations {

    String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);

    AccessGrant exchangeForAccess(String authorizationCode, String redirectUri, MultiValueMap<String, String> additionalParameters);

}]]>
			</programlisting>			
			<para>
				Callers are first expected to call buildAuthorizeUrl(GrantType, AuthorizationParameters) to construct the URL to redirect the user to for connection authorization.
				Upon user authorization, the authorizationCode returned by the provider should be exchanged for an AccessGrant.
				The AccessGrant should then used to create a connection.
				This flow is illustrated below:
			</para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="70"/>
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="0"/>
				</imageobject>
			</mediaobject>
      		<para>
				As you can see, there is a back-and-forth conversation that takes place between the application and the service provider to grant the application access to the provider account.
				This exchange, commonly known as the "OAuth Dance", follows these steps:
			</para>
			<orderedlist>
				<listitem>
					<para>
						The flow starts by the application redirecting the user to the provider's authorization URL.
						Here the provider displays a web page asking the user if he or she wishes to grant the application access to read and update their data.
					</para>
				</listitem>
				<listitem>
					<para>
						The user agrees to grant the application access.
					</para>
				</listitem>
				<listitem>
					<para>
						The service provider redirects the user back to the application (via the redirect URI), passing an authorization code as a parameter.
					</para>
				</listitem>
				<listitem>
					<para>
						The application exchanges the authorization grant for an access grant.
					</para>
				</listitem>
				<listitem>
					<para>
						The service provider issues the access grant to the application.
						The grant includes an access token and a refresh token.
						One receipt of these tokens, the "OAuth dance" is complete.
					</para>
				</listitem>
				<listitem>
					<para>
						The application uses the AccessGrant to establish a connection between the local user account and the external provider account.
						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user.
					</para>
				</listitem>
			</orderedlist>
			<para>
			 	The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above.
				Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:
				<programlisting language="java"><![CDATA[
FacebookServiceProviderConnectionFactory connectionFactory = new FacebookServiceProviderConnectionFactory();
OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();
String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new AuthorizationParameters(callbackUrl));
response.sendRedirect(authorizeUrl);
// when the provider callback is received with the authorizationCode parameter:
AccessGrant accessGrant = oauth2Operations.exchangeForAccess(authorizationCode, callbackUrl);
ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>
				</programlisting>
			</para>
			<para>
				The following example illustrates the client-side "implicit" authorization flow also supported by OAuth2.
				The difference between this flow and the server-side "authorization code" flow above is the provider callback directly contains the access grant (no additional exchange is necessary).
				This flow is appropriate for clients incapable of keeping the access grant credentials confidential, such as a mobile device or JavaScript-based user agent.
				<programlisting language="java"><![CDATA[
FacebookServiceProviderConnectionFactory connectionFactory = new FacebookServiceProviderConnectionFactory();
OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();
String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, new AuthorizationParameters(callbackUrl));
response.sendRedirect(authorizeUrl);
// when the provider callback is received with the access_token parameter:
AccessGrant accessGrant = new AccessGrant(accessToken);
ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>
				</programlisting>
			</para>
		</section>
		<section id="service-providers-oauth1">
			<title>OAuth1 Service Providers</title>
			OAuth 1 is the previous version of the OAuth protocol.
			It is more complex OAuth 2, and sufficiently different that it is supported separately.
			Twitter, Linked In, and TripIt are some of the well-known ServiceProviders that use OAuth 1.
			In Spring Social, the OAuth1ServiceProviderConnectionFactory allows you to create connections to a OAuth1-based Service Provider:			
			<programlisting language="java"><![CDATA[
public class OAuth1ServiceProviderConnectionFactory<S> extends ServiceProviderConnectionFactory<S> {

    public OAuth1Operations getOAuthOperations();

    public ServiceProviderConnection<S> createConnection(OAuthToken accessToken);

}]]>
			</programlisting>
			<para>
				Like a OAuth2-based provider, <methodname>getOAuthOperations()</methodname> returns an API to use to conduct the authorization flow, or "OAuth Dance".
				The result of the OAuth 1 flow is an <classname>OAuthToken</classname> that can be used to establish a connection with a local user account by calling <methodname>createConnection</methodname>.
				The OAuth1Operations interface is shown below:				
			</para>
			<programlisting language="java"><![CDATA[
public interface OAuth1Operations {

    OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters);

    String buildAuthorizeUrl(String requestToken, AuthorizationParameters parameters);

    OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken, MultiValueMap<String, String> additionalParameters);

}]]>
			</programlisting>			
			<para>
				Callers are first expected to call fetchNewRequestToken(String) obtain a temporary token from the ServiceProvider to use during the authorization session.
				Next, callers should call buildAuthorizeUrl(String, AuthorizationParameters) to construct the URL to redirect the user to for connection authorization.
				Upon user authorization, the authorized request token returned by the provider should be exchanged for an access token.
				The access token should then used to create a connection.
				This flow is illustrated below:				
			</para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="70"/>
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="0"/>
				</imageobject>
			</mediaobject>
			<orderedlist>
				<listitem>
					<para>
						The flow starts with the application asking for a request token.
						The purpose of the request token is to obtain user approval and it can only be used to obtain an access token.
						In OAuth 1.0a, the consumer callback URL is passed to the provider when asking for a request token.
					</para>
				</listitem>
				<listitem>
					<para>
						The service provider issues a request token to the consumer.
					</para>
				</listitem>
				<listitem>
					<para>
						The application redirects the user to the provider's authorization page, passing the request token as a parameter.
						In OAuth 1.0, the callback URL is also passed as a parameter in this step.
					</para>
				</listitem>
				<listitem>
					<para>
						The service provider prompts the user to authorize the consumer application and the user agrees.
					</para>
				</listitem>
				<listitem>
					<para>
						The service provider redirects the user's browser back to the application (via the callback URL).
						In OAuth 1.0a, this redirect includes a verifier code as a parameter. At this point, the request token is authorized.
					</para>
				</listitem>
				<listitem>
					<para>
						The application exchanges the authorized request token (including the verifier in OAuth 1.0a) for an access token.
					</para>
				</listitem>
				<listitem>
					<para>
						The service provider issues an access token to the consumer. The "dance" is now complete.
					</para>
				</listitem>
				<listitem>
					<para>
						The application uses the access token to establish a connection between the local user account and the external provider account.
						With the connection established, the application can now obtain a reference to the Service API and invoke the provider on behalf of the user.
					</para>
				</listitem>				
			</orderedlist>
			<para>
				The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above.
				Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:
				<programlisting language="java"><![CDATA[
TwitterServiceProviderConnectionFactory connectionFactory = new TwitterServiceProviderConnectionFactory();
OAuth1Operations oauth1Operations = connectionFactory.getOAuth1Operations();
String requestToken = oauth1Operations.fetchRequestToken(callbackUrl);
String authorizeUrl = oauth1Operations.buildAuthorizeUrl(requestToken, AuthorizationParameters.NONE);
response.sendRedirect(authorizeUrl);
// when the provider callback is received with the oauth_token and oauth_verifier parameters:
OAuthToken accessToken = oauth1Operations.exchangeForAccessToken(new AuthorizedRequestToken(oauthToken, oauthVerifier));
ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessToken);]]>
				</programlisting>
			</para>
		</section>
		<section id="service-providers-persisting-connections">
			<title>Persisting Connections</title>
			<para>
				After a connection has been established, you may wish to persist it for later use.
				This makes things convenient for the user since the connection can simply be restored from its persistent form and does not need to be established again.
				Spring Social provides a ServiceProviderConnectionRepository interface for managing the persistence of a user's connections:
			</para>
			<programlisting language="java"><![CDATA[
public interface ServiceProviderConnectionRepository {

    MultiValueMap<String, ServiceProviderConnection<?>> findConnections();
	
    List<ServiceProviderConnection<?>> findConnectionsToProvider(String providerId);

    MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUserIds);

    ServiceProviderConnection<?> findConnection(ServiceProviderConnectionKey connectionKey);

    <S> ServiceProviderConnection<S> findConnectionByServiceApi(Class<S> serviceApiType);
	
    <S> List<ServiceProviderConnection<S>> findConnectionsByServiceApi(Class<S> serviceApiType);
	
    <S> ServiceProviderConnection<S> findConnectionByServiceApiForUser(Class<S> serviceApiType, String providerUserId);	
	
    void addConnection(ServiceProviderConnection<?> connection);

    void updateConnection(ServiceProviderConnection<?> connection);

    void removeConnectionsToProvider(String providerId);

    void removeConnection(ServiceProviderConnectionKey connectionKey);

}]]>
			</programlisting>
			<para>
				As you can see, this interface provides a number of operations for adding, updating, removing, and finding ServiceProviderConnections.
				Consult the JavaDoc API of this interface for a full description of these operations.
				Note that all operations on this repository are scoped relative to a "current user" that has authenticated with your local application.
			</para>
			<para>
				For multi-user environments, Spring Social provides a MultiUserServiceProviderConnectionFactory that provides access to the global store of connections across all users:
			</para>
			<programlisting language="java"><![CDATA[
public interface MultiUserServiceProviderConnectionRepository {

    String findLocalUserIdForConnection(ServiceProviderConnectionKey connectionKey);

    Set<String> findLocalUserIdsConnectedTo(String providerId, Set<String> providerUserIds);

    ServiceProviderConnectionRepository createConnectionRepository(String localUserId);

}]]>
			</programlisting>
			<para>
				As you can see, this repository acts as a factory for ServiceProviderConnectionRepository instances scoped to a single user, as well as exposes a number of multi-user operations.
				These operations include the ability to lookup the local userIds associated with connections to support provider user sign-in and show "registered friends" scenarios.
				Consult the JavaDoc API of this interface for a full description.
			</para>
			<section id="service-providers-persisting-connections-jdbc">
				<title>JDBC-based Persistence</title>
				<para>
					Spring Social ships a JdbcMultiUserServiceProviderConnectionRepository capable of persisting connections to a RDBMS.
				</para>
			</section>
		</section>
	</section>
</chapter>