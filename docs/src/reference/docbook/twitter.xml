<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="twitter"
    xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Twitter</title>

  <para>Twitter's social offering is rather simple: Enable users to post random thoughts, 140 characters at a time.</para>
  
  <para>Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterOperations</interfacename>) offers several options for applications to integrate with the short-spoken Twitter.</para>
  
  <para>Creating an instance of <classname>TwitterTemplate</classname> involves invoking its constructor, passing in the application's OAuth credentials and an access token/secret pair authorizing the application to act on a user's behalf. For example:</para>
  
  <programlisting><![CDATA[String apiKey = "..."; // The application's API/Consumer key
  String apiSecret = "..."; // The application's API/Consumer secret
  String accessToken = "..."; // The access token granted after OAuth authorization
  String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization
  TwitterOperations twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]></programlisting>
  
  <para>In addition, <classname>TwitterTemplate</classname> has a default constructor that creates an instance without any OAuth credentials:</para>
  
  <programlisting><![CDATA[TwitterOperations twitter = new TwitterTemplate();]]></programlisting>
  
  <para>When constructed with the default constructor, <classname>TwitterTemplate</classname> will allow a few simple operations that do not require authorization, such as searching. Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown.</para>
  
  <para>If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterOperations</interfacename> by calling on of <classname>TwitterServiceProvider</classname>'s <methodname>getServiceOperations()</methodname> methods. For instance:</para>
  
  <programlisting><![CDATA[TwitterOperations twitter = twitterProvider.getServiceOperations(accountId);]]></programlisting>
  
  <para>Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterOperations</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>.</para>
  
  <para>Once you have <interfacename>TwitterOperations</interfacename>, you can perform a variety of operations against Twitter.</para>

  <section id="twitter-getProfile">
    <title>Retrieving a user's Twitter profile data</title>

    <para>To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:</para>
    
    <programlisting><![CDATA[TwitterProfile profile = twitter.getUserProfile();]]></programlisting>
    
    <para>This returns a <classname>TwitterProfile</classname> object containing profile data for the authenticated user. This profile information includes the user's Twitter screen name, their name, location, description, and the date that they created their Twitter account. Also included is a URL to their profile image.</para>
    
    <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname></para>:

    <programlisting><![CDATA[TwitterProfile profile = twitter.getUserProfile("habuma");]]></programlisting>

    <para>If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:</para>

    <programlisting><![CDATA[String profileId = twitter.getProfileId();]]></programlisting>
    
  </section>

  <section id="twitter-status">
    <title>Tweeting</title>

    <para>To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:</para>

    <programlisting><![CDATA[twitter.updateStatus("Spring Social is awesome!")]]></programlisting>

    <para>Optionally, you may also include metadata about the tweet, such as the location (latitude and longitude) you are tweeting from. For that, pass in a <classname>StatusDetails</classname> object, setting the location property:</para>

    <programlisting><![CDATA[StatusDetails statusDetails = new StatusDetails().setLocation(51.502f, -0.126f);
twitter.updateStatus("I'm tweeting from London!", statusDetails)]]></programlisting>

    <para>To have Twitter display the location in a map (on the Twitter web site) then you should also set the <code>displayCoordinates</code> property to <code>true</code>:</para>

    <programlisting><![CDATA[StatusDetails statusDetails = new StatusDetails().setLocation(51.502f, -0.126f).setDisplayCoordinates(true);
twitter.updateStatus("I'm tweeting from London!", statusDetails)]]></programlisting>


    <para>If you'd like to retweet another tweet (perhaps one found while searching or reading the Twitter timeline), call the <methodname>retweet()</methodname> method, passing in the ID of the tweet to be retweeted:</para>

    <programlisting><![CDATA[long tweetId = tweet.getId();
twitter.retweet(tweetId);]]></programlisting>

    <para>Note that Twitter disallows repeated tweets. Attempting to tweet or retweet the same message multiple times will result in a <classname>DuplicateTweetException</classname> being thrown.</para>
  </section>

  <section id="twitter-timelines">
    <title>Reading Twitter timelines</title> <!-- and mentions -->

    <para>From a Twitter user's perspective, Twitter organizes tweets into four different timelines:</para>
    
    <itemizedlist>
        <listitem><para>User - Includes tweets posted by the user.</para></listitem>
        <listitem><para>Friends - Includes tweets from the user's timeline and the timeline of anyone that they follow, with the exception of any retweets.</para></listitem>
        <listitem><para>Home - Includes tweets from the user's timeline and the timeline of anyone that they follow.</para></listitem>
        <listitem><para>Public - Includes tweets from all Twitter users.</para></listitem>
    </itemizedlist>

    <para>To be clear, the only difference between the home timeline and the friends timeline is that the friends timeline excludes retweets.</para>
    
    <para><classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:</para>

    <programlisting><![CDATA[List<Tweet> tweets = twitter.getPublicTimeline();]]></programlisting>

    <para><methodname>getHomeTimeline()</methodname> retrieves the 20 most recent tweets from the user's home timeline:</para>

    <programlisting><![CDATA[List<Tweet> tweets = twitter.getHomeTimeline();]]></programlisting>

    <para>Similarly, <methodname>getFriendsTimeline()</methodname> retrieves the 20 most recent tweets from the user's friends timeline:</para>

    <programlisting><![CDATA[List<Tweet> tweets = twitter.getFriendsTimeline();]]></programlisting>

    <para>To get tweets from the authenticating user's own timeline, call the <methodname>getUserTimeline()</methodname> method:</para>

    <programlisting><![CDATA[List<Tweet> tweets = twitter.getUserTimeline();]]></programlisting>

    <para>If you'd like to retrieve the 20 most recent tweets from a specific user's timeline (not necessarily the authenticating user's timeline), pass the user's screen name in as a parameter to <methodname>getUserTimeline()</methodname>:</para>

    <programlisting><![CDATA[List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]></programlisting>
    
    <para>In addition to the four Twitter timelines, you may also want to get a list of tweets mentioning the user. The <methodname>getMentions()</methodname> method returns the 20 most recent tweets that mention the authenticating user:</para>
    
    <programlisting><![CDATA[List<Tweet> tweets = twitter.getMentions();]]></programlisting>
    

  </section>
  
  <section id="twitter-search">
    <title>Searching Twitter</title>

    <para><classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method.</para>

    <para>For example, to search for tweets containing "#spring":</para>

    <programlisting><![CDATA[SearchResults results = twitter.search("#spring");]]></programlisting>
    
    <para>The <methodname>search()</methodname> method will return a <classname>SearchResults</classname> object that includes a list of 50 most recent matching tweets as well as some metadata concerning the result set. The metadata includes the maximum tweet ID in the search results list as well as the ID of a tweet that precedes the resulting tweets. The <code>sinceId</code> and <code>maxId</code> properties effectively define the boundaries of the result set. Additionally, there's a boolean <code>lastPage</code> property that, if <code>true</code>, indicates that this result set is the page of results.</para>
    
    <para>To gain better control over the paging of results, you may choose to pass in the page and results per page to <methodname>search()</methodname>:</para>
    
    <programlisting><![CDATA[SearchResults results = twitter.search("#spring", 2, 10);]]></programlisting>
        
    <para>Here, we're asking for the 2nd page of results where the pages have 10 tweets per page.</para>
    
    <para>Finally, if you'd like to confine the bounds of the search results to fit between two tweet IDs, you may pass in the since and maximum tweet ID values to <methodname>search()</methodname>:</para>
    
    <programlisting><![CDATA[SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]></programlisting>
    
    <para>This ensures that the result set will not contain any tweets posted before the tweet whose ID is 146962 nor any tweets posted after the tweet whose ID is 210112.</para>
  </section>

  <section id="twitter-directMessages">
    <title>Sending and receiving direct messages</title>

    <para>In addition to posting tweets to the public timelines, Twitter also supports sending of private messages directly to a given user. <classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:</para>

    <programlisting><![CDATA[twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]></programlisting>

    <para><classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:</para>

    <programlisting><![CDATA[List<DirectMessage> twitter.getDirectMessagesReceived();]]></programlisting>

    <para><methodname>getDirectMessagesReceived()</methodname> will return the 20 most recently received direct messages.</para>

  </section>

</chapter>
