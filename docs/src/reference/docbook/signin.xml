<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="signin" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Signing in with Service Provider Accounts</title>

	<section xml:id="signin_introduction">
		<title>Introduction</title>
		
		<para>
			Once a connection has been established between a user's consumer account and their service provider profile, that connection can be used to authenticate them to the consumer application by asking them to sign in to the service provider. 
			Spring Social supports such service provider-based authentication with <classname>ProviderSignInController</classname> from the web module.
		</para>

		<para>
			<classname>ProviderSignInController</classname> works very much like <classname>ConnectController</classname> in that it goes through the OAuth flow (either OAuth 1 or OAuth 2, depending on the provider).
			At the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application.
			If no previously established connection matches, the flow will be sent to the application's signup page so that the user may register with the application.
		</para>

		<para>
			To add provider signin capability to your Spring application, configure <classname>ProviderSignInController</classname> as a bean in your Spring MVC application:
		</para>		
		
		<programlisting language="xml"><![CDATA[
<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">
    <constructor-arg value="http://localhost:8080/myapplication" />
</bean>]]>
		</programlisting>
		
		<para>
			Although <classname>ProviderSignInController</classname>'s only constructor takes 5 parameters, it is also annotated with <classname>@Inject</classname>.
			So, when optimized for autowiring, the <classname>ProviderSignInController</classname> bean only requires a <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL.
			<classname>ProviderSignInController</classname> wil use this URL to construct the callback URL used in the authentication flow.
		</para>
		
		<para>
			When authenticating through an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:
		</para>
		
		<itemizedlist>
			<listitem><para><code>POST /signin/{provider ID}</code> - Initiates the signin flow. This means fetching a request token from the provider and then redirecting to Provider's authentication page.</para></listitem>
			<listitem><para><code>GET /signin/{provider ID}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>
				<itemizedlist>
					<listitem>
						<para>
							If the received access token doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a signup URL. 
							The signup URL is "/signup" (relative to the application root).
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>

		<para>
			For OAuth 2 providers, the flow is only slightly different:
		</para>
		
		<itemizedlist>
			<listitem><para><code>POST /signin/{provider ID}</code> - Initiates the signin flow. Redirects to Provider's authentication page.</para></listitem>
			<listitem><para><code>GET /signin/{provider ID}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>
				<itemizedlist>
					<listitem>
						<para>
							If the received access token doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a signup URL. 
							The signup URL is "/signup" (relative to the application root).
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
				
		<para>
			<classname>ProviderSignInController</classname> handles the authentication flow with a provider, but relies on an implementation of <interfacename>SignInService</interfacename> to perform the actual authentication into the application. 
			<interfacename>SignInService</interfacename> is defined as follows:
		</para>

		<programlisting language="java"><![CDATA[
public interface SignInService {
    void signIn(String localUserId);
}]]>
		</programlisting>

		<para>
			Different applications will implement security differently, so each application must implement <interfacename>SignInService</interfacename> in a way that fits its unique security scheme.
			As an example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. 
			In that case, a simple implementation of <interfacename>SignInService</interfacename> might look like this:
		</para>

		<programlisting language="java"><![CDATA[
package org.springframework.social.showcase.signin;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.social.connect.signin.web.SignInService;

public class SpringSecuritySigninService implements SignInService {
    public void signIn(String localUserId) {
        SecurityContextHolder.getContext().setAuthentication(
                new UsernamePasswordAuthenticationToken(localUserId, null, null));
    }
}
]]>
		</programlisting>

		<para>
      		The last thing to do is to add a signin button to your application that will kick off the authentication flow with <classname>ProviderSignInController</classname>.
      		As an example, let's add a "Signin with Twitter" button:
  		</para>
          
		<programlisting language="xml"><![CDATA[
<form id="tw_signin" action="<c:url value="/signin/twitter"/>" method="POST">
    <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" /></button>
</form>]]>
		</programlisting>

		<para>
			Clicking this button will trigger a POST request to "/signin/twitter", kicking off the Twitter sign in flow. 
			If the user has not yet signed into Twitter, the user will be presented with the following page from Twitter:
		</para>

		<mediaobject>
			<imageobject role="fo">
				<imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>
			</imageobject>
			<imageobject role="html">
				  <imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>
			</imageobject>
		</mediaobject>

		<para>
			After signing in, the flow will redirect back to the application to complete the sign in process.
		</para>
    
	</section>
	
	<section xml:id="signin_signup">
		<title>Signing up after a failed sign in</title>
		
	</section>	
</chapter>
