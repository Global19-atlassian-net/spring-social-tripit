<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting"
		xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Connecting to Service Providers</title>

	<section id="section_connecting_introduction">
		<title>Introduction</title>
      	<para>
      		In <xref linkend="serviceprovider"/>, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections the link your application's user accounts with accounts on external service providers.
      		In this chapter, you'll learn how to control the connect flow in a web application environment.
      	</para>
		<para>
			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that coordinates the connection flow between an application and service providers.
			<classname>ConnectController</classname> takes care of redirecting the user to the service provider for authorization and responding to the callback after authorization.
		</para>
	</section>

	<section id="section_connecting_service_providers">
		<title>Configuring connection support</title> <!-- Needs a better title? -->
		
		<para>
			As <classname>ConnectController</classname> directs the connection flow, it depends on a couple of other objects to assist in the creation and persistence of connections.
			<classname>ConnectController</classname> works with one or more <interfacename>ServiceProviderConnectionFactory</interfacename>s to exchange authorization details with the provider and to create connections.
			Once a connection has been established, <classname>ConnectController</classname> hands it off to a <interfacename>ServiceProviderConnectionRepository</interfacename> to be persisted. 
		</para>
		
		<para>
			Spring Social comes with an implementation of <interfacename>ServiceProviderConnectionFactory</interfacename> for each of the supported service providers:
		</para>
		
		<itemizedlist>
			<listitem><para><classname>TwitterServiceProviderConnectionFactory</classname></para></listitem>
			<listitem><para><classname>FacebookServiceProviderConnectionFactory</classname></para></listitem>
			<listitem><para><classname>LinkedInServiceProviderConnectionFactory</classname></para></listitem>
			<listitem><para><classname>TripItServiceProviderConnectionFactory</classname></para></listitem>
			<listitem><para><classname>GitHubServiceProviderConnectionFactory</classname></para></listitem>
			<listitem><para><classname>GowallaTwitterServiceProviderConnectionFactory</classname></para></listitem>
		</itemizedlist>
		
		<para>
			<classname>ConnectController</classname> relies on an implementation of <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to help it find a connection factory for a specific provider.
			Spring Social's <classname>MapServiceProviderConnectionFactoryRegistry</classname> is an implementation of <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> that keeps a Map-based registry of connection factories.
			The following configuration class registers a <classname>MapServiceProviderConnectionFactoryRegistry</classname> with <interfacename>ServiceProviderConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: 		
		</para>

		<programlisting language="java"><![CDATA[
package org.springframework.social.showcase.config;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.social.connect.ServiceProviderConnectionFactory;
import org.springframework.social.connect.ServiceProviderConnectionFactoryLocator;
import org.springframework.social.connect.support.MapServiceProviderConnectionFactoryRegistry;
import org.springframework.social.facebook.api.FacebookApi;
import org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory;
import org.springframework.social.tripit.api.TripItApi;
import org.springframework.social.tripit.connect.TripItServiceProviderConnectionFactory;
import org.springframework.social.twitter.api.TwitterApi;
import org.springframework.social.twitter.connect.TwitterServiceProviderConnectionFactory;

@Configuration
public class ServiceProviderConnectionFactoryLocatorConfig {
	
    @Value("${twitter.consumerKey}")
    private String twitterConsumerKey;
	
    @Value("${twitter.consumerSecret}")
    private String twitterConsumerSecret;

    @Value("${facebook.appId}")
    private String facebookClientId;
	
    @Value("${facebook.appSecret}")
    private String facebookClientSecret;

    @Value("${tripit.consumerKey}")
    private String tripItConsumerKey;
	
    @Value("${tripit.consumerSecret}")
    private String tripItConsumerSecret;

    @Bean
    public ServiceProviderConnectionFactoryLocator serviceProviderConnectionFactoryLocator() {
        MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();
        registry.addConnectionFactory(
                new TwitterServiceProviderConnectionFactory(twitterConsumerKey, twitterConsumerSecret));
        registry.addConnectionFactory(
                new FacebookServiceProviderConnectionFactory(facebookClientId, facebookClientSecret));
        registry.addConnectionFactory(
                new TripItServiceProviderConnectionFactory(tripItConsumerKey, tripItConsumerSecret));
        return registry;
    }
	
}
]]></programlisting>

		<para>
			Or, if you prefer Spring's XML-based configuration, here's the equivalent <code><![CDATA[<bean>]]></code>configuration:
		</para>

		<programlisting language="xml"><![CDATA[
<bean id="serviceProviderConnectionFactoryLocator" 
      class="org.springframework.social.connect.support.MapServiceProviderConnectionFactoryRegistry">
    <property name="connectionFactories">
        <list>
            <bean class="org.springframework.social.twitter.connect.TwitterServiceProviderConnectionFactory">
                <constructor-arg value="${twitter.consumerKey}" />
                <constructor-arg value="${twitter.consumerSecret}" />				
            </bean>
            <bean class="org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory">
                <constructor-arg value="${facebook.appId}" />
                <constructor-arg value="${facebook.appSecret}" />				
            </bean>
            <bean class="org.springframework.social.tripit.connect.TripItServiceProviderConnectionFactory">
                <constructor-arg value="${tripit.consumerKey}" />
                <constructor-arg value="${tripit.consumerSecret}" />				
            </bean>
        </list>
    </property>
</bean>]]>
		</programlisting>	
		
		<para>
			<classname>MapServiceProviderConnectionFactoryRegistry</classname> is given a list of service provider connection factories through its <code>connectionFactories</code> property.
			As configured here, it registers connection factories for Twitter, Facebook, and TripIt.
		</para>
		
		<para>
			Each connection factory is configured as an inner-bean and is injected with the consumer key/application ID and secret that were assigned to it when the application was registered with the service provider.
			Because the consumer key and secret may be different across environments (e.g., test, production, etc) it is recommended that these values be externalized. 
		</para>	
		
		<para>
			<classname>ConnectController</classname> will use <interfacename>ServiceProviderConnectionFactory</interfacename>s that it obtains through <classname>MapServiceProviderConnectionFactoryRegistry</classname> to perform the authorization exchange with the provider and ultimately to create a connection.
			Once that connection has been created, it must be persisted and associated with the user's local account.
			For that, <classname>ConnectController</classname> depends on a <interfacename>ServiceProviderConnectionRepository</interfacename>.
		</para>
		
		<para>
			As discussed in <xref linkend="service-providers-persisting-connections"/>, <interfacename>ServiceProviderConnectionRepository</interfacename> defines operations for persisting and restoring connections for a specific user. 
			Therefore, when configuring a <interfacename>ServiceProviderConnectionRepository</interfacename> bean, it must be scoped such that it can be created on a per-user basis.
			The following Java-based configuration shows how to configure <interfacename>ServiceProviderConnectionRepository</interfacename> bean in request scope so that it can be created from an authenticated user's principal:
		</para>
		
		<programlisting language="java"><![CDATA[
package org.springframework.social.showcase.config;
import java.security.Principal;
import javax.inject.Inject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.social.connect.MultiUserServiceProviderConnectionRepository;
import org.springframework.social.connect.ServiceProviderConnectionRepository;

@Configuration
public class ServiceProviderConnectionRepositoryConfig {

    @Inject
    private MultiUserServiceProviderConnectionRepository usersConnectionRepository;

    @Bean
    @Scope(value="request")
    public ServiceProviderConnectionRepository serviceProviderConnectionRepository(
            @Value("#{request.userPrincipal}") Principal principal) {
        if (principal == null) {
            throw new IllegalStateException("Unable to get a ServiceProviderConnectionRepository: no user logged in");
        }
        return usersConnectionRepository.createConnectionRepository(principal.getName());
    }
	
}]]>
		</programlisting>	
	
		<para>
			The <methodname>serviceProviderConnectionRepository()</methodname> method is injected with a <classname>Principal</classname> (pulled from the request with a Spring Expression Language expression).
			If the <classname>Principal</classname> is null, the there is no user signed into the application and there's no way to persist connections for the user.
			However, if the <classname>Principal</classname> is not null, it is passed to the injected <interfacename>MultiUserServiceProviderConnectionRepository</interfacename>'s <methodname>createConnectionRepository()</methodname> method to create a <interfacename>ServiceProviderConnectionRepository</interfacename> relative to the user.
		</para>	
		
		<para>
			This means that we're also going to need to configure a <interfacename>MultiUserServiceProviderConnectionRepository</interfacename> bean.
			Here's one configured in Spring's Java configuration style:
		</para>
		

		<programlisting language="java"><![CDATA[
package org.springframework.social.showcase.config;
import javax.sql.DataSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.social.connect.MultiUserServiceProviderConnectionRepository;
import org.springframework.social.connect.ServiceProviderConnectionFactoryLocator;
import org.springframework.social.connect.jdbc.JdbcMultiUserServiceProviderConnectionRepository;

@Configuration
public class MultiUserServiceProviderConnectionRepositoryConfig {

	@Bean
	public MultiUserServiceProviderConnectionRepository usersServiceProviderConnectionRepository(
			DataSource dataSource, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, 
			TextEncryptor textEncryptor) {
		return new JdbcMultiUserServiceProviderConnectionRepository(dataSource, connectionFactoryLocator, textEncryptor);
	}
	
}]]>
		</programlisting>

		
		
		<programlisting language="xml"><![CDATA[
<bean id="usersServiceProviderConnectionRepository" 
      class="org.springframework.social.connect.jdbc.JdbcMultiUserServiceProviderConnectionRepository">
    <constructor-arg ref="dataSource" />
    <constructor-arg ref="serviceProviderConnectionFactoryLocator" />
    <constructor-arg ref="textEncryptor" />
</bean>]]>
		</programlisting>
		
		<para>
			<classname>JdbcMultiUserServiceProviderConnectionRepository</classname> is created with a references to a <interfacename>DataSource</interfacename>, a <interfacename>ServiceProviderConnectionFactoryLocator</interfacename>, and a text encryptor.
			It will use the <interfacename>DataSource</interfacename> to acess the RDBMS when persisting and restoring connections.
			When restoring connections, it will use the <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> to create the connection instances.
		</para>
		
		<para>
			<classname>JdbcMultiUserServiceProviderConnectionRepository</classname> uses a <interfacename>TextEncryptor</interfacename> to encrypt the credentials (e.g., access tokens and secrets) obtained during authorization when writing them to the database.
			Spring Security 3.1 makes a few useful text encryptors available via static factory methods in its <classname>Encryptors</classname> class.
			For example, the following XML configures two text encryptors; a no-op text encryptor and a stronger queryable-text encryptor:
		</para>				
		
		<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <beans profile="dev">
        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" 
              factory-method="noOpText" />
    </beans>
	
    <beans profile="production">
        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" 
              factory-method="queryableText">
            <constructor-arg value="${security.encryptPassword}" />
            <constructor-arg value="${security.encryptSalt}" />
        </bean>
    </beans>

</beans>]]>
		</programlisting>

		<para>
			Notice that these encryptor beans are each configured under different profiles.
			Spring 3.1 introduced the <emphasis>profile</emphasis> concept where certain beans will only be created when certain profiles are active.
			Here, the no-op text encryptor bean will only be created when "dev" is an active profile.
			For production-time purposes, a stronger text encryptor is recommended and can be created when the "production" profile is active.
		</para>

	</section>
	  
	<section id="connect-controller">
		<title>Creating connections with <classname>ConnectController</classname></title>
		<para>
			With <classname>ConnectController</classname>'s dependencies configured, <classname>ConnectController</classname> will be able to coordinate the connection process for the service providers whose connection factories are registered with <classname>MapServiceProviderConnectionFactoryRegistry</classname>.
			<classname>ConnectController</classname> is a Spring MVC controller and can be configured as a bean in your application's Spring MVC configuration as follows:
		</para>
		<programlisting language="java"><![CDATA[
package org.springframework.social.showcase.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.social.web.connect.ConnectController;
import org.springframework.stereotype.Component;

@Configuration
public class ConnectControllerConfig {

    @Bean
    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {
        return new ConnectController(applicationUrl);
    }
	
}]]>
		</programlisting>		
		<para>
			Or, if you prefer Spring's XML-based configuration, then you can configure <classname>ConnectController</classname> like this:
		</para>
		<programlisting language="xml"><![CDATA[
<bean class="org.springframework.social.web.connect.ConnectController">
    <constructor-arg value="${application.url}" />
</bean>]]>
		</programlisting>
		<para>
			In either case, <classname>ConnectController</classname> is constructed with the base URL for the application.
			<classname>ConnectController</classname> will use this URL to construct callback URLs used in the authorization flow.
			Since the base URL of an application will be different between environments, it is recommended that you externalize it.
			Here the URL is specified as a placeholder variable.
		</para>
		<para>
			<classname>ConnectController</classname> supports authorization flows for either OAuth 1 or OAuth 2, relying on <interfacename>OAuth1Template</interfacename> or <interfacename>OAuth2Template</interfacename> to handle the specifics for each protocol.
			<classname>ConnectController</classname> will obtain the appropriate OAuth template from one of the provider connection factories registered with <classname>MapServiceProviderConnectionFactoryRegistry</classname>.
			It will select a specific <classname>ServiceProviderConnectionFactory</classname> to use by matching the connection factory's ID with the URL path.
			The path pattern that <classname>ConnectController</classname> handles is "/connect/{providerId}".
			Therefore, if <classname>ConnectController</classname> is handling a request for "/connect/twitter", then the <interfacename>ServiceProviderConnectionFactory</interfacename> whose <methodname>getProviderId()</methodname> returns "twitter" will be used.
			(As configured in the previous section, <classname>TwitterServiceProviderConnectionFactory</classname> will be chosen.)
		</para>
		<para>
			The flow that <classname>ConnectController</classname> follows is slightly different, depending on which authorization protocol is supported by the service provider.
			For OAuth 2-based providers, the flow is as follows:
		</para>
		<itemizedlist>
			<listitem><para><code>GET /connect/{providerId}</code> - Displays a web page showing connection status to the provider.</para></listitem>
			<listitem><para><code>POST /connect/{providerId}</code> - Initiates the connection flow with the provider.</para></listitem>
			<listitem><para><code>GET /connect/{providerId}?code={code}</code> - Receives the authorization callback from the provider, accepting an authorization code. Uses the code to request an access token and complete the connection.</para></listitem>
			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>
		</itemizedlist>    
		<para>
			For an OAuth 1 provider, the flow is very similar, with only a subtle difference in how the callback is handled:
		</para>
		<itemizedlist>
			<listitem><para><code>GET /connect/{providerId}</code> - Displays a web page showing connection status to the provider.</para></listitem>
			<listitem><para><code>POST /connect/{providerId}</code> - Initiates the connection flow with the provider.</para></listitem>
			<listitem>
				<para>
					<code>GET /connect/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - 
					Receives the authorization callback from the provider, accepting a verification code. 
					Exchanges this verification code along with the request token for an access token and completes the connection.
					The <code>oauth_verifier</code> parameter is optional and is only used for providers implementing OAuth 1.0a.
				</para>
			</listitem>
			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>
		</itemizedlist>

		<section id="connect-controller-flow-1">
			<title>Displaying a connection page</title>
			<para>
				Before the connection flow starts in earnest, a web application may choose to show a page that offers the user information on their connection status.
				This page would offer them the opportunity to create a connection between their account and their social profile. 
				<classname>ConnectController</classname> can display such a page if the browser navigates to <code>/connect/{provider}</code>.
			</para>
			<para>
				For example, to display a connection status page for Twitter, where the provider name is "twitter", your application should provide a link similar to this:
			</para>
			<programlisting language="xml"><![CDATA[
<a href="<c:url value="/connect/twitter" />">Connect to Twitter</a>]]>
			</programlisting>
			<para>
				<classname>ConnectController</classname> will respond to this request by first checking to see if a connection already exists between the user's account and Twitter. 
				If not, then it will with a view that should offer the user an opportunity to create the connection. 
				Otherwise, it will respond with a view to inform the user that a connection already exists.
			</para>
			<para>
				The view names that <classname>ConnectController</classname> responds with are based on the provider's name. 
				In this case, since the provider name is "twitter", the view names are "connect/twitterConnect" and "connect/twitterConnected".
			</para>
		</section>
    
		<section id="connect-controller-flow-2">
			<title>Initiating the connection flow</title>
			<para>
				To kick off the connection flow, the application should <code>POST</code> to <code>/connect/{providerId}</code>. 
				Continuing with the Twitter example, the JSP resolved from "connect/twitterConnect" might include the following form:
			</para>
			<programlisting language="xml"><![CDATA[
<form action="<c:url value="/connect/twitter" />" method="POST">
    <p>You haven't created any connections with Twitter yet. Click the button to create
       a connection between your account and your Twitter profile. 
       (You'll be redirected to Twitter where you'll be asked to authorize the connection.)</p>
    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>
</form>]]>
			</programlisting>
      		<para>
      			When <classname>ConnectController</classname> handles the request, it will redirect the browser to the provider's authorization page. 
      			In the case of an OAuth 1 provider, it will first fetch a request token from the provider and pass it along as a parameter to the authorization page. 
      			Request tokens aren't used in OAuth 2, however, so instead it passes the application's client ID and redirect URI as parameters to the authorization page.
      		</para>
      		<para>
      			For example, Twitter's authorization URL has the following pattern:
      		</para>
			<programlisting><![CDATA[https://twitter.com/oauth/authorize?oauth_token={token}]]></programlisting>
      		<para>
      			If the application's request token were "vPyVSe"<footnote><para>This is just an example. Actual request tokens are typically much longer.</para></footnote>, then the browser would be redirected to https://twitter.com/oauth/authorize?oauth_token=vPyVSe and a page similar to the following would be displayed to the user (from Twitter)<footnote><para>If the user has not yet signed into Twitter, the authorization page will also include a username and password field for authentication into Twitter.</para></footnote>:
      		</para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/twitter-authorize.png" format="PNG" align="center" scale="40"/>
				</imageobject>
				<imageobject role="xml">
					<imagedata fileref="images/twitter-authorize.png" format="PNG" align="center" scale="40"/>
				</imageobject>
			</mediaobject>
			<para>
				In contrast, Facebook is an OAuth 2 provider, so its authorization URL takes a slightly different pattern:
			</para>
			<programlisting><![CDATA[https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}]]></programlisting>
			<para>
				Thus, if the application's Facebook client ID is "0b754" and it's redirect URI is "http://www.mycoolapp.com/connect/facebook", then the browser would be redirected to <![CDATA[https://graph.facebook.com/oauth/authorize?client_id=0b754&redirect_uri=http://www.mycoolapp.com/connect/facebook]]> and Facebook would display the following authorization page to the user:
			</para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/facebook-authorize-basic.png" format="PNG" align="center" scale="40"/>
				</imageobject>
				<imageobject role="xml">
					<imagedata fileref="images/facebook-authorize-basic.png" format="PNG" align="center" scale="40"/>
				</imageobject>
			</mediaobject>      
			<para>
				If the user clicks the "Allow" button to authorize access, the provider will redirect the browser back to the authorization callback URL where <classname>ConnectController</classname> will be waiting to complete the connection.
			</para>
      		<para>
      			The behavior varies from provider to provider when the user denies the authorization. 
      			For instance, Twitter will simply show a page telling the user that they denied the application access and does not redirect back to the application's callback URL. 
      			Facebook, on the other hand, will redirect back to the callback URL with error information as request parameters.
      		</para>
      
			<section id="connect-controller-flow-3-scope">
        		<title>Authorization scope</title>
				<para>
					In the previous example of authorizing an application to interact with a user's Facebook profile, you notice that the application is only requesting access to the user's basic profile information. 
					But there's much more that an application can do on behalf of a user with Facebook than simply harvest their profile data. 
					For example, how can an application gain authorization to post to a user's Facebook wall?
				</para>
				<para>
					OAuth 2 authorization may optionally include a scope parameter that indicates the type of authorization being requested. 
					On the provider, the "scope" parameter should be passed along to the authorization URL. 
					In the case of Facebook, that means that the Facebook authorization URL pattern should be as follows:
				</para>
				<programlisting><![CDATA[https://graph.facebook.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}]]></programlisting>
				<para>
					<classname>ConnectController</classname> accepts a "scope" parameter at authorization and passes its value along to the provider's authorization URL. 
					For example, to request permission to post to a user's Facebook wall, the connect form might look like this:
				</para>
				<programlisting language="xml"><![CDATA[
<form action="<c:url value="/connect/twitter" />" method="POST">
    <input type="hidden" name="scope" value="publish_stream,offline_access" />
    <p>You haven't created any connections with Twitter yet. Click the button to create
       a connection between your account and your Twitter profile. 
       (You'll be redirected to Twitter where you'll be asked to authorize the connection.)</p>
    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>
</form>]]>
				</programlisting>
				<para>
					The hidden "scope" field contains the scope values to be passed along in the <code>scope></code> parameter to Facebook's authorization URL. 
					In this case, "publish_stream" requests permission to post to a user's wall. 
					In addition, "offline_access" requests permission to access Facebook on behalf of a user even when the user isn't using the application.
				</para>
				<note>
					<para>
						OAuth 2 access tokens typically expire after some period of time. 
						Per the OAuth 2 specification, an application may continue accessing a provider after a token expires by using a refresh token to either renew an expired access token or receive a new access token (all without troubling the user to re-authorize the application).
					</para>
					<para>
						Facebook does not currently support refresh tokens. 
						Moreover, Facebook access tokens expire after about 2 hours. 
						So, to avoid having to ask your users to re-authorize ever 2 hours, the best way to keep a long-lived access token is to request "offline_access".
					</para>
				</note>
				<para>
					When asking for "publish_stream,offline_access" authorization, the user will be prompted with the following authorization page from Facebook:
				</para>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/facebook-authorize-scoped.png" format="PNG" align="center" scale="40"/>
					</imageobject>
					<imageobject role="xml">
						<imagedata fileref="images/facebook-authorize-scoped.png" format="PNG" align="center" scale="40"/>
					</imageobject>
				</mediaobject>
				<para>
					Scope values are provider-specific, so check with the service provider's documentation for the available scopes. 
					Facebook scopes are documented at <ulink url="http://developers.facebook.com/docs/authentication/permissions" />.
				</para>
			</section>
		</section>
    
		<section id="connect-controller-flow-3">
			<title>Responding to the authorization callback</title>
			<para>
				After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. 
				For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. 
				For OAuth 2, the code will be in a <code>code</code> parameter.
			</para>
			<para>
				<classname>ConnectController</classname> will handle the callback request and trade in the verifier/code for an access token. 
				Once the access token has been received, the OAuth dance is complete and the application may use the access token to interact with the provider on behalf of the user. 
				The last thing that <classname>ConnectController</classname> does is to hand off the access token to the <interfacename>ServiceProvider</interfacename> implementation to be stored for future use.
			</para>
		</section>

		<section id="connect-controller-flow-disconnect">
			<title>Disconnecting</title>
			<para>
				To delete a connection via <classname>ConnectController</classname>, submit a DELETE request to "/connect/{provider}".
			</para>
			<para>
				In order to support this through a form in a web browser, you'll need to have Spring's <ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html"><classname>HiddenHttpMethodFilter</classname></ulink> configured in your application's web.xml. 
				Then you can provide a disconnect button via a form like this:
			</para>
			<programlisting language="xml"><![CDATA[
<form action="<c:url value="/connect/twitter" />" method="post">
   <div class="formInfo">
      <p>Spring Social Showcase is connected to your Twitter account.
         Click the button if you wish to disconnect.</p>
   </div>
   <button type="submit">Disconnect</button>	
   <input type="hidden" name="_method" value="delete" />
</form>]]>
			</programlisting>
			<para>
				When this form is submitted, <classname>ConnectController</classname> will disconnect the user's account from the provider.
				It does this by calling the <methodname>disconnect()</methodname> method on each of the <interfacename>ServiceProviderConnection</interfacename>s returned by the provider's <methodname>getConnections()</methodname> method. 
			</para>
		</section>
	</section>

 	<section id="connect-interceptors">
 		<title>Connection interceptors</title>
		<para>
			In the course of creating a connection with a service provider, you may want to inject additional functionality into the connection flow. 
			For instance, perhaps you'd like to automatically post a tweet to a user's Twitter timeline immediately upon creating the connection.
		</para>
		<para>
			<classname>ConnectController</classname> may be configured with one or more connection interceptors that it will call at points in the connection flow. 
			These interceptors are defined by the <interfacename>ConnectInterceptor</interfacename> interface:
		</para>
		<programlisting language="java"><![CDATA[
public interface ConnectInterceptor<S> {
	
	void preConnect(ServiceProviderConnectionFactory<S> connectionFactory, WebRequest request);

	void postConnect(ServiceProviderConnection<S> connection, WebRequest request);
	
}]]>
		</programlisting>
		<para>
			The <methodname>preConnect()</methodname> method will be called by <classname>ConnectController</classname> just before redirecting the browser to the provider's authorization page. 
			<methodname>postConnect()</methodname> will be called immediately after a connection has been persisted linking the user's local account with the provider profile.
		</para>
		<para>
			For example, suppose that after connecting a user account with their Twitter profile , you want to immediately post a tweet about that connection to the user's Twitter timeline. 
			To accomplish that, you might write the following connection interceptor:
		</para>
		<programlisting language="java"><![CDATA[
package org.springframework.social.showcase.twitter;
import org.springframework.social.connect.ServiceProvider;
import org.springframework.social.connect.ServiceProviderConnection;
import org.springframework.social.twitter.DuplicateTweetException;
import org.springframework.social.twitter.TwitterApi;
import org.springframework.social.web.connect.ConnectInterceptor;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.WebRequest;

public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterApi> {

    public void preConnect(ServiceProviderConnectionFactory<TwitterApi> provider, WebRequest request) {
        // nothing to do
    }

    public void postConnect(ServiceProviderConnection<TwitterApi> connection, WebRequest request) {
        connection.updateStatus("I've connected with the Spring Social Showcase!");
    }
}]]>
		</programlisting>
		<para>
			This interceptor can then be injected into <classname>ConnectController</classname> when it is created:
		</para>
		<programlisting language="java"><![CDATA[
@Bean
public ConnectController connectController(@Value("${application.url}") String applicationUrl) {
    ConnectController controller = new ConnectController(applicationUrl);
    controller.addInterceptor(new TweetAfterConnectInterceptor());
    return controller;
}]]>
		</programlisting>
		<para>Or, as configured in XML:</para>
		<programlisting language="xml"><![CDATA[
<bean class="org.springframework.social.web.connect.ConnectController">
    <constructor-arg value="http://localhost:8080/myapplication" />
    <property name="interceptors">
        <list>
            <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />
        </list>
    </property>
</bean>]]>
		</programlisting>
		<para>
			Note that the <code>interceptors</code> property is a list and can take as many interceptors as you'd like to wire into it. 
			When it comes time for <classname>ConnectController</classname> to call into the interceptors, it will only invoke the interceptor methods for those interceptors whose service operations type matches the service provider's operations type. 
			In the example given here, only connections made through a service provider whose operation type is <interfacename>TwitterApi</interfacename> will trigger the interceptor's methods.
		</para>
	</section>
</chapter>
